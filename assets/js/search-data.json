{
  
    
        "post0": {
            "title": "Single Cell Classification",
            "content": "Group Members: . Johannes Ehlers Nyholm Thomsen | Kaare Veggerby Sandbøl | Kasper Malmsiø Hoffmann | Mike Holst Meldgaard | . import pandas as pd import numpy as np import os import io import base64 from tqdm import tqdm from PIL import Image import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline from fastai.vision.all import * import torch.nn.functional as nnf import torch torch.cuda.empty_cache() from fastai.callback.all import * . from scclib.util.image import create_samples, assemble_rgb_image, get_rgb_pieces_tensors, HPAImage . Collect data: . Vores data, som er udleveret fra Kaggle, skal vi have samlet i det udleverede data til en kanal. Et billede er udleveret som 4 greyscaled billeder, hvor hvert greyscaled billede repræsenterer rød, grøn, blå og gul farve af det samlede billede. . I denne konkurrences forum har folk konkluderet, at den gule del af billedet har ingen indflydelse på modellernes præcision, hvorfor vi har valgt at sortere den fra. . Vi skal derfor have samlet de 3 RBG billeder til et samlet billede. Til at gøre dette har vi lavet et hjælpe bibliotek, da det bare er en masse python kode. Koden tager de 3 billeder, putter deres data i den respektive farve kanal for et samlet billede og resizer til en ønsket størrelse. Vi resizer allerede her, da vi så kan gøre det på GPU i stedet for CPU&#39;en. . cuda0 = torch.device(&#39;cuda:0&#39;) . data_path = Path(&#39;Z: cloud data hpa-single-cell-image-classification&#39;) path = Path(&#39;../data&#39;) . df = pd.read_csv(data_path/&#39;train.csv&#39;) . df.head() . ID Label . 0 5c27f04c-bb99-11e8-b2b9-ac1f6b6435d0 | 8|5|0 | . 1 5fb643ee-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | . 2 60b57878-bb99-11e8-b2b9-ac1f6b6435d0 | 6|1 | . 3 5c1a898e-bb99-11e8-b2b9-ac1f6b6435d0 | 16|10 | . 4 5b931256-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | . labels = [str(i) for i in range(19)] for x in labels: df[x] = df[&#39;Label&#39;].apply(lambda r: int(x in r.split(&#39;|&#39;))) df.head() . ID Label 0 1 2 3 4 5 6 7 ... 9 10 11 12 13 14 15 16 17 18 . 0 5c27f04c-bb99-11e8-b2b9-ac1f6b6435d0 | 8|5|0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 5fb643ee-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 60b57878-bb99-11e8-b2b9-ac1f6b6435d0 | 6|1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 5c1a898e-bb99-11e8-b2b9-ac1f6b6435d0 | 16|10 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 4 5b931256-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 5 rows × 21 columns . dfs_0 = df[df[&#39;Label&#39;] == &#39;0&#39;].sample(n=300, random_state=42).reset_index(drop=True) dfs_1 = df[df[&#39;1&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_1u = df[df[&#39;Label&#39;] == &#39;1&#39;].sample(n=221, random_state=42).reset_index(drop=True) dfs_2 = df[df[&#39;Label&#39;] == &#39;2&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_3 = df[df[&#39;Label&#39;] == &#39;3&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_4 = df[df[&#39;Label&#39;] == &#39;4&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_5 = df[df[&#39;Label&#39;] == &#39;5&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_6 = df[df[&#39;6&#39;] == 1].sample(n=500, random_state=42).reset_index(drop=True) dfs_7 = df[df[&#39;Label&#39;] == &#39;7&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_8 = df[df[&#39;Label&#39;] == &#39;8&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_9 = df[df[&#39;9&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_9u = df[df[&#39;Label&#39;] == &#39;9&#39;].sample(n=200, random_state=42).reset_index(drop=True) dfs_10 = df[df[&#39;10&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_10u = df[df[&#39;Label&#39;] == &#39;10&#39;].sample(n=200, random_state=42).reset_index(drop=True) dfs_11 = df[df[&#39;11&#39;] == 1].reset_index(drop=True) dfs_12 = df[df[&#39;Label&#39;] == &#39;12&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_13 = df[df[&#39;Label&#39;] == &#39;13&#39;].sample(n=400, random_state=42).reset_index(drop=True) dfs_14 = df[df[&#39;Label&#39;] == &#39;14&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_15 = df[df[&#39;15&#39;] == 1].reset_index(drop=True) dfs_16 = df[df[&#39;Label&#39;] == &#39;16&#39;].sample(n=350, random_state=42).reset_index(drop=True) dfs_17 = df[df[&#39;17&#39;] == 1].sample(n=500, random_state=42).reset_index(drop=True) dfs_18 = df[df[&#39;18&#39;] == 1].reset_index(drop=True) dfs_ = [dfs_0, dfs_1, dfs_1u, dfs_2, dfs_3, dfs_4, dfs_5, dfs_6, dfs_7, dfs_8, dfs_9, dfs_9u, dfs_10, dfs_10u, dfs_11, dfs_12, dfs_13, dfs_14, dfs_15, dfs_16, dfs_17, dfs_18] . dfs = pd.concat(dfs_, ignore_index=True) dfs.drop_duplicates(inplace=True, ignore_index=True) . data_path = Path(&#39;../data&#39;) image_path = Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/train&#39;) image_destination = data_path/&#39;train&#39; if not image_destination.exists(): os.makedirs(image_destination) . example_image = image_path.ls()[0].name image_id, image_ext = example_image.split(&#39;.&#39;) image_id = image_id.split(&#39;_&#39;)[0] . Data Preparation: . Billederne bliver udleveret i en kvalitet af 1080p og op efter. Vi har valgt at resize dem til 512 gange 512 for at bevare nok billede kvalitet men også undgå at løbe tør for hukkomelse på computeren. . Efter vi har fundet dataen skal vi have loaded dem ind i en dataloader. Samtidig med at vi gør det cropper vi også billederne ned til 256 gange 256 opløsning, og da vi bruger batch_tfms sker der en tilfældig crop og augmentering. Der sker dog kun resizing på valideringssettet. . Vi har altså været nød til selv manuelt at implementere den fremgangsmåde, som fastai kalder presizing, da vores udleverede billeder er i så høj kvalitet. Vi interpolerer dog 2 gange i stedet for kun én gang, som hvis vi brugte fastai presizing, hvilket resulterer i en ringere billedkvalitet, men vi vinder performance. . new_img = HPAImage(id=image_id, ext=image_ext, path=image_path, device=&quot;cuda:0&quot;, size=512) new_img.plot_all() . C: Users Marianne source repos SingleCellClassification scclib util image.py:141: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at .. torch csrc utils tensor_numpy.cpp:141.) return torch.from_numpy(arr) . create_samples(512, dfs, image_path, image_destination, csv_path=data_path/&#39;cells_sample.csv&#39;, device=&quot;cuda:0&quot;) . 100%|██████████| 7960/7960 [00:02&lt;00:00, 3480.55it/s] . models_path = Path(&#39;../models&#39;) path = Path(&#39;../data&#39;) . cell_df = pd.read_csv(path/&#39;cells_sample.csv&#39;) cell_df.head() . image_id image_labels . 0 0e63afe6-bbca-11e8-b2bc-ac1f6b6435d0 | 0 | . 1 6166673c-bbad-11e8-b2ba-ac1f6b6435d0 | 0 | . 2 2533bcc2-bba5-11e8-b2ba-ac1f6b6435d0 | 0 | . 3 280f88c2-bba5-11e8-b2ba-ac1f6b6435d0 | 0 | . 4 13669cc6-bbaa-11e8-b2ba-ac1f6b6435d0 | 0 | . def get_x(r): return path/&#39;train&#39;/f&quot;{r[&#39;image_id&#39;]}.png&quot; def get_y(r): return r[&#39;image_labels&#39;].split(&#39;|&#39;) . def get_dls(bs: int, size: int): return DataBlock(blocks=(ImageBlock, MultiCategoryBlock), splitter=RandomSplitter(seed=42), get_x=get_x, get_y=get_y, batch_tfms=aug_transforms(size=size, min_scale=0.75)) .dataloaders(cell_df, bs=bs, num_workers=0) . batch_size = 64 image_size = 256 dls = get_dls(batch_size, image_size) . dls.show_batch() . Choose Model: . Vi har valgt at bruge et residualt netværk, som er trænet på ImageNet. I vores model er det kun et netværk med 18 lag, så vi ikke skal vente hundrede år mellem hver træning, når vi eksperimenterer med modellen. Derudover så vi ikke en markant højere præcision, da vi trænede med modellen med 50 lag. Det kan også ses, at vi bruger fp16 for at spare regnekraft mens vi træner. . learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2)).to_fp16() . Evaluation: . Til vores models metric bruger vi standard præcision for multicategory, hvilket er accuracy_multi. Vi vil dog gerne have en threshhold på 0.2, derfor er vi nød til at give mertics en partial, hvilket betyder at der laves en ny version af accuracy_multi, hvor threshold er den værdi vi sender med i partial. . Tuning: . Da vi har valgt at bruge en på-forhånd trænet model, ResNet, er vi nød til at finjustere den til vores problem. Dette gøres ved at kalde fine_tune på vores learner. fine_tune smider det sidste linære lag i modellen væk og skifter det ud med et nyt linært lag. Dernæst fryser modellen vægtene i alle de gamle lag, og træner nu det nye linære lag i en epoche. Derefter tøes de frosne lag op og modellen trænes nu sammen i det ønskede antal gange - her er det 5. . På denne måde undgår vi at smide alt den træning modellen har fra ImageNet væk, og modellen bliver stadig optimeret til lige vores problemstilling. . learn.lr_find() . . SuggestedLRs(lr_min=0.04365158379077912, lr_steep=0.033113110810518265) . with learn.no_bar(): learn.fine_tune(10, base_lr=0.03) . [0, 0.34980544447898865, 0.21575936675071716, 0.897976815700531, &#39;01:12&#39;] [0, 0.19443851709365845, 0.17364072799682617, 0.9226064085960388, &#39;01:13&#39;] [1, 0.17741426825523376, 0.23870453238487244, 0.890835702419281, &#39;01:13&#39;] [2, 0.1630779206752777, 0.18634462356567383, 0.9153332710266113, &#39;01:16&#39;] [3, 0.1506965458393097, 0.17100191116333008, 0.9302763342857361, &#39;01:15&#39;] [4, 0.138868510723114, 0.16251589357852936, 0.9270033240318298, &#39;01:12&#39;] [5, 0.12858404219150543, 0.1374361515045166, 0.9359297156333923, &#39;01:12&#39;] [6, 0.11740823090076447, 0.12153063714504242, 0.9489883184432983, &#39;01:12&#39;] [7, 0.10452622920274734, 0.12300284951925278, 0.9457483887672424, &#39;01:13&#39;] [8, 0.09402365237474442, 0.11247400939464569, 0.9501455426216125, &#39;01:09&#39;] [9, 0.08716251701116562, 0.11231212317943573, 0.9507405757904053, &#39;01:10&#39;] . class Hook: def hook_func(self, model, input, output): self.stored = output.detach().clone() . hook_output = Hook() hook = learn.model[0].register_forward_hook(hook_output.hook_func) . x = dls.one_batch()[0][0].unsqueeze(0) . print(x.shape) print(x) . torch.Size([1, 3, 256, 256]) TensorImage([[[[-2.0231, -2.0357, -2.0299, ..., -1.6746, -1.4395, -1.5836], [-2.0286, -2.0056, -2.0632, ..., -1.7627, -1.6788, -1.6909], [-2.0218, -2.0498, -2.0858, ..., -1.7766, -1.6992, -1.6864], ..., [-0.7180, -1.8194, -1.9184, ..., -1.5146, -0.9398, -0.9181], [-1.6267, -1.8597, -1.9624, ..., -1.5632, -1.5681, -1.2201], [-1.8928, -1.9339, -1.9746, ..., -1.0895, -0.1448, -0.5516]], [[-2.0302, -1.9965, -2.0278, ..., -1.9795, -2.0335, -2.0310], [-2.0306, -2.0083, -2.0152, ..., -1.7657, -2.0251, -2.0326], [-2.0229, -2.0334, -2.0357, ..., -1.9133, -2.0004, -1.9826], ..., [-1.9782, -1.9471, -2.0050, ..., -1.9584, -1.8945, -1.9435], [-1.9265, -1.9703, -1.9974, ..., -1.8735, -1.7904, -1.7379], [-1.9151, -1.9776, -2.0173, ..., -1.7882, -1.5698, -1.7833]], [[-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.7987, -1.7882], ..., [-1.7999, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044]]]], device=&#39;cuda:0&#39;) . with torch.no_grad(): output = learn.model.eval()(x) . act = hook_output.stored[0] . F.softmax(output, dim=-1) . tensor([[9.3069e-03, 9.8083e-01, 3.0847e-05, 1.2865e-05, 1.1578e-03, 4.2077e-04, 1.6482e-05, 8.6766e-05, 3.8656e-03, 7.4111e-05, 6.5331e-05, 5.8279e-04, 4.6459e-05, 1.0263e-04, 2.0953e-03, 1.3299e-04, 1.7882e-04, 2.1191e-04, 7.8174e-04]], device=&#39;cuda:0&#39;) . dls.vocab . [&#39;0&#39;, &#39;1&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;, &#39;16&#39;, &#39;17&#39;, &#39;18&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;] . cam_map = torch.einsum(&#39;ck,kij-&gt;cij&#39;, learn.model[1][-1].weight, act) cam_map.shape . torch.Size([19, 8, 8]) . cam_map[1] . tensor([[-11.7976, -8.8484, -9.0233, -9.5797, -13.6296, -15.6943, -13.6190, -13.1508], [ -7.6053, -5.0152, -7.8845, -9.5468, -10.7061, -13.3279, -9.2101, -10.0630], [ -5.5384, -3.8083, -7.0739, -9.1266, -8.7326, -7.5732, -4.4432, -9.2882], [ -5.9409, -3.0918, -6.9509, -7.3649, -8.8905, -9.3576, -6.9014, -12.0372], [ -6.1369, -2.9236, -4.8785, -7.4147, -7.4539, -9.9532, -10.8462, -16.2405], [-10.1607, -7.5774, -7.2242, -11.0472, -8.8943, -9.8135, -13.6099, -21.2422], [-14.1123, -10.2740, -11.2755, -11.2595, -11.4919, -9.7790, -13.1679, -17.1019], [-21.0718, -15.0101, -14.2335, -12.5560, -12.0332, -15.0552, -19.4397, -19.5940]], device=&#39;cuda:0&#39;, grad_fn=&lt;SelectBackward&gt;) . x_dec = TensorImage(dls.train.decode((x,))[0][0]) _,ax = plt.subplots() x_dec.show(ctx=ax) ax.imshow(cam_map[1].detach().cpu(), alpha=0.5, extent=(0,256,256,0), interpolation=&#39;bilinear&#39;, cmap=&#39;nipy_spectral&#39;) . &lt;matplotlib.image.AxesImage at 0x18b2f6e66d0&gt; . time_now = datetime.now().strftime(format=&#39;%y%m%d-%H%M%S&#39;) model_name = f&#39;{time_now}_resnet18_e10_lr-003.pkl&#39; learn.export(fname=models_path/model_name) . Prediction: . Vi har ikke kunnet få Kaggle til at give os en score på vores model, da de vil vores predictions i en meget speciel og træls opsætning. . torch.cuda.empty_cache() . path = Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test&#39;) . images = get_image_files(path) images . (#2236) [Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_green.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_red.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_yellow.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_green.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_red.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_yellow.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/00537262-883c-4b37-a3a1-a4931b6faea5_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/00537262-883c-4b37-a3a1-a4931b6faea5_green.png&#39;)...] . learn_inf = load_learner(models_path/model_name, cpu=False) . test_dl = learn_inf.dls.test_dl(images) . item = test_dl.one_batch()[0] with learn_inf.no_bar(): predictions, _ = learn_inf.predict(item) . RuntimeError Traceback (most recent call last) &lt;ipython-input-40-d3f43f7a7a95&gt; in &lt;module&gt; -&gt; 1 item = test_dl.one_batch()[0] 2 3 with learn_inf.no_bar(): 4 predictions, _ = learn_inf.predict(item) 5 ~ anaconda3 envs fastai lib site-packages fastai data load.py in one_batch(self) 135 def one_batch(self): 136 if self.n is not None and len(self)==0: raise ValueError(f&#39;This DataLoader does not contain any batches&#39;) --&gt; 137 with self.fake_l.no_multiproc(): res = first(self) 138 if hasattr(self, &#39;it&#39;): delattr(self, &#39;it&#39;) 139 return res ~ anaconda3 envs fastai lib site-packages fastcore basics.py in first(x, f, negate, **kwargs) 545 x = iter(x) 546 if f: x = filter_ex(x, f=f, negate=negate, gen=True, **kwargs) --&gt; 547 return next(x, None) 548 549 # Cell ~ anaconda3 envs fastai lib site-packages fastai data load.py in __iter__(self) 99 self.before_iter() 100 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 101 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 102 if self.device is not None: b = to_device(b, self.device) 103 yield self.after_batch(b) ~ anaconda3 envs fastai lib site-packages torch utils data dataloader.py in __next__(self) 433 if self._sampler_iter is None: 434 self._reset() --&gt; 435 data = self._next_data() 436 self._num_yielded += 1 437 if self._dataset_kind == _DatasetKind.Iterable and ~ anaconda3 envs fastai lib site-packages torch utils data dataloader.py in _next_data(self) 473 def _next_data(self): 474 index = self._next_index() # may raise StopIteration --&gt; 475 data = self._dataset_fetcher.fetch(index) # may raise StopIteration 476 if self._pin_memory: 477 data = _utils.pin_memory.pin_memory(data) ~ anaconda3 envs fastai lib site-packages torch utils data _utils fetch.py in fetch(self, possibly_batched_index) 32 raise StopIteration 33 else: &gt; 34 data = next(self.dataset_iter) 35 return self.collate_fn(data) 36 ~ anaconda3 envs fastai lib site-packages fastai data load.py in create_batches(self, samps) 108 self.it = iter(self.dataset) if self.dataset is not None else None 109 res = filter(lambda o:o is not None, map(self.do_item, samps)) --&gt; 110 yield from map(self.do_batch, self.chunkify(res)) 111 112 def new(self, dataset=None, cls=None, **kwargs): ~ anaconda3 envs fastai lib site-packages fastai data load.py in do_batch(self, b) 131 def create_item(self, s): return next(self.it) if s is None else self.dataset[s] 132 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) --&gt; 133 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) 134 def to(self, device): self.device = device 135 def one_batch(self): ~ anaconda3 envs fastai lib site-packages fastai data load.py in create_batch(self, b) 130 def retain(self, res, b): return retain_types(res, b[0] if is_listy(b) else b) 131 def create_item(self, s): return next(self.it) if s is None else self.dataset[s] --&gt; 132 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) 133 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) 134 def to(self, device): self.device = device ~ anaconda3 envs fastai lib site-packages fastai data load.py in fa_collate(t) 46 b = t[0] 47 return (default_collate(t) if isinstance(b, _collate_types) &gt; 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) 50 ~ anaconda3 envs fastai lib site-packages fastai data load.py in &lt;listcomp&gt;(.0) 46 b = t[0] 47 return (default_collate(t) if isinstance(b, _collate_types) &gt; 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) 50 ~ anaconda3 envs fastai lib site-packages fastai data load.py in fa_collate(t) 45 &#34;A replacement for PyTorch `default_collate` which maintains types and handles `Sequence`s&#34; 46 b = t[0] &gt; 47 return (default_collate(t) if isinstance(b, _collate_types) 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) ~ anaconda3 envs fastai lib site-packages torch utils data _utils collate.py in default_collate(batch) 53 storage = elem.storage()._new_shared(numel) 54 out = elem.new(storage) &gt; 55 return torch.stack(batch, 0, out=out) 56 elif elem_type.__module__ == &#39;numpy&#39; and elem_type.__name__ != &#39;str_&#39; 57 and elem_type.__name__ != &#39;string_&#39;: ~ anaconda3 envs fastai lib site-packages fastai torch_core.py in __torch_function__(self, func, types, args, kwargs) 323 convert=False 324 if _torch_handled(args, self._opt, func): convert,types = type(self),(torch.Tensor,) --&gt; 325 res = super().__torch_function__(func, types, args=args, kwargs=kwargs) 326 if convert: res = convert(res) 327 if isinstance(res, TensorBase): res.set_meta(self, as_copy=True) ~ anaconda3 envs fastai lib site-packages torch tensor.py in __torch_function__(cls, func, types, args, kwargs) 993 994 with _C.DisableTorchFunction(): --&gt; 995 ret = func(*args, **kwargs) 996 return _convert(ret, cls) 997 RuntimeError: stack expects each tensor to be equal size, but got [3, 2048, 2048] at entry 0 and [3, 3072, 3072] at entry 16 .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/jupyter/exercise/2021/05/24/Single-Cell-Classification-Exam.ipynb.html",
            "relUrl": "/jupyter/exercise/2021/05/24/Single-Cell-Classification-Exam.ipynb.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Opgave 3 23 02 2021",
            "content": "10:15 – Opgave 3 . 1. Explain how the “pixel similarity” approach to classifying digits works. . Opstil matrix, der repræsenterer billedet, hvert koordinat repræsenterer et pixel. . | Man kan nu sammenligne denne matrice med en idéel udgave af det, som man skal klassificere mod, ved at se på, hvor stor forskel der er på den idéelle matrix og billedmatrixen. Forskellen udregnes typisk med root mean square (L2 norm) eller mean of absolute differences(L1 norm). . | . 2. What is a list comprehension? Create one now that selects odd numbers from a list and doubles them. . list = [f(x) for x in collection] . | . | . 3. What is a “rank-3 tensor”? . En tensors rank beskriver hvor mange unikke datatyper den tensor indeholder. Dette har ikke noget med størrelsen eller mængden af data at gøre, men hvad dataen beskriver. . | . 4. What are RMSE and L1 norm? . RMSE er hvor man beregner forskellen på to datasæt, det gøres ved at tage forskellen altså (a_1 - b_1)^2 og sætter den i anden, så tager man gennemsnittet af det altså af alle værdierne(a_n-b_n)^2 og så tager du kvadratroden af gennemsnittet for ikke at have forskellen repræsenteres som en kvadrat værdi. . | L1 Norm er hvor man tager den absolutte forskel fra to værdier, og tager gennemsnittet | a_n - b_n | . Tallet vil altid blive positivt, selvom forskellen kan være -150 så vil selve forskellen være 150. Hvis begge tal er negative, ganger man de to tal og tager den positive kvadratrod. | . | . 5. Create a 3×3 tensor or array containing the numbers from 1 to 9. Double it. Select the bottom-right four numbers. . . | . 6. What is broadcasting? . . | . 7. Are metrics generally calculated using the training set, or the validation set? Why? . Validation, fordi man er nødt til at vide hvor god den er til at predikte på ikke set data. . | . 8. What is SGD? . . | . 9. What are the seven steps in SGD for machine learning? . . . 10. How do we initialize the weights in a model? . Random eller fra en pretrained model . | . 11. What is “loss”? . Mængden af fejl, numeriske værdier for hvor god ens model er . | . 12. Why can’t we always use a high learning rate? . . | . 13. What is a “gradient”? . Differentialet (Hældningen), på et specifikt punkt . | . 14. Why can’t we use accuracy as a loss function? . . | en meget lille ændring i vægt værdierne vil ikke ændre i vores accuracy og derfor ikke bruges som en loss function . | . 15. What is the difference between a loss function and a metric? . . | . 16. What is the function to calculate new weights using a learning rate? . Backpropagation . | . 17. What does the backward method do? . metoden går baglæns, starter i slutningen, og tilpasser med ændringerne . | udregner gradienten for hver vægt i hvert lag . | .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/2021/05/24/Opgave-3-23-02-2021.html",
            "relUrl": "/2021/05/24/Opgave-3-23-02-2021.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Finding painter",
            "content": "import fastbook fastbook.setup_book() #hide from fastbook import * from fastai.vision.widgets import * import requests . def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=50&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] + &quot;.jpg&quot; for img in search_results[&quot;value&quot;][:50]]) . painter_names = &#39;Nicolai Abildgaard&#39;,&#39;C. G. Kratzenstein&#39;, &#39;Georg Achen&#39;, &#39;Kathinka Agerskov&#39; path = Path(&#39;painters&#39;) if not path.exists(): path.mkdir() for f in painter_names: dest = (path/f) dest.mkdir(exist_ok=True) results = search_images_bing_new(&#39;1be3ada0f2a649d087e9fb39798485a0&#39;, f, &#39;efb1b149-c219-4091-be6d-14a279c405c4&#39;) download_images(dest, urls=results) . class DataLoaders(GetAttr): def __init__(self, *loaders): self.loaders = loaders def __getitem__(self, i): return self.loaders[i] train, valid = add_props(lambda i, self: self[i]) . paintings = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = paintings.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . paintings = paintings.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = paintings.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . paintings = paintings.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = paintings.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . paintings = paintings.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = paintings.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.269590 | 3.188402 | 0.838710 | 00:18 | . epoch train_loss valid_loss error_rate time . 0 | 1.823546 | 2.619593 | 0.677419 | 00:24 | . 1 | 1.939489 | 1.641134 | 0.548387 | 00:22 | . 2 | 1.743367 | 1.467217 | 0.451613 | 00:22 | . 3 | 1.603481 | 1.389295 | 0.419355 | 00:23 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;/content/Test/asset.dr.dk.jpg&#39;) . (&#39;Nicolai Abildgaard&#39;, tensor(3), tensor([0.0023, 0.2615, 0.0896, 0.6465])) .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/jupyter/2021/05/24/FindPainterForPainting.html",
            "relUrl": "/jupyter/2021/05/24/FindPainterForPainting.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Hotdog Identifier",
            "content": "import fastbook fastbook.setup_book() #hide from fastbook import * from fastai.vision.all import * from fastai.vision.widgets import * import requests . def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] + &quot;.jpg&quot; for img in search_results[&quot;value&quot;][:150]]) . hotdogs = search_images_bing_new(&#39;1be3ada0f2a649d087e9fb39798485a0&#39;, &#39;hotdog&#39;, &#39;efb1b149-c219-4091-be6d-14a279c405c4&#39;) . hotdogs . (#150) [&#39;https://tse2.mm.bing.net/th?id=OIP.WwNG0Db_o58XuR8uyHFGJQHaE8&amp;pid=Api.jpg&#39;,&#39;https://tse3.mm.bing.net/th?id=OIP.1Xkr3YbMeVXI-QJL8w6AigHaDt&amp;pid=Api.jpg&#39;,&#39;https://tse2.mm.bing.net/th?id=OIP.QHEOpw8npesuG0h6ojJ0HwHaFj&amp;pid=Api.jpg&#39;,&#39;https://tse3.mm.bing.net/th?id=OIP.UyKMCHBsnEpwRGlJmu1HWQHaE8&amp;pid=Api.jpg&#39;,&#39;https://tse2.mm.bing.net/th?id=OIP.3IVuG7q7Q3B_BmyXkvjz0gHaFj&amp;pid=Api.jpg&#39;,&#39;https://tse4.mm.bing.net/th?id=OIP.GNLLKkmhb5bXAwQ2z8Vh7AHaFj&amp;pid=Api.jpg&#39;,&#39;https://tse4.mm.bing.net/th?id=OIP.uovloOsMkI8LfzTheiLThQHaE6&amp;pid=Api.jpg&#39;,&#39;https://tse4.mm.bing.net/th?id=OIP.au202vJwBfwntBr4Byjw5wHaFj&amp;pid=Api.jpg&#39;,&#39;https://tse1.mm.bing.net/th?id=OIP.nE5Gj2cAgzraJHOhzBG65AHaEK&amp;pid=Api.jpg&#39;,&#39;https://tse3.mm.bing.net/th?id=OIP.WqTuusD_RbVuMEIbIDlFsQHaD4&amp;pid=Api.jpg&#39;...] . hotdogs[0] . &#39;https://tse2.mm.bing.net/th?id=OIP.WwNG0Db_o58XuR8uyHFGJQHaE8&amp;pid=Api.jpg&#39; . food_types = &#39;hotdog&#39;,&#39;burger&#39; path = Path(&#39;foods&#39;) if not path.exists(): path.mkdir() for f in food_types: dest = (path/f) dest.mkdir(exist_ok=True) results = search_images_bing_new(&#39;1be3ada0f2a649d087e9fb39798485a0&#39;, f, &#39;efb1b149-c219-4091-be6d-14a279c405c4&#39;) download_images(dest, urls=results) . fns = get_image_files(path) fns . (#300) [Path(&#39;foods/burger/00000077.jpg&#39;),Path(&#39;foods/burger/00000097.jpg&#39;),Path(&#39;foods/burger/00000061.jpg&#39;),Path(&#39;foods/burger/00000102.jpg&#39;),Path(&#39;foods/burger/00000107.jpg&#39;),Path(&#39;foods/burger/00000132.jpg&#39;),Path(&#39;foods/burger/00000096.jpg&#39;),Path(&#39;foods/burger/00000079.jpg&#39;),Path(&#39;foods/burger/00000110.jpg&#39;),Path(&#39;foods/burger/00000125.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . class DataLoaders(GetAttr): def __init__(self, *loaders): self.loaders = loaders def __getitem__(self, i): return self.loaders[i] train, valid = add_props(lambda i, self: self[i]) . foods = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = foods.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = foods.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = foods.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = foods.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . foods = foods.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = foods.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . foods = foods.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = foods.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 0.816658 | 0.570072 | 0.233333 | 00:44 | . epoch train_loss valid_loss error_rate time . 0 | 0.328600 | 0.333271 | 0.133333 | 01:08 | . 1 | 0.236929 | 0.163014 | 0.083333 | 01:01 | . 2 | 0.181611 | 0.150076 | 0.066667 | 01:01 | . 3 | 0.144509 | 0.194078 | 0.083333 | 01:01 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;/content/Hamburger.jpg&#39;) . (&#39;burger&#39;, tensor(0), tensor([0.9987, 0.0013])) . learn_inf.dls.vocab . [&#39;burger&#39;, &#39;hotdog&#39;] . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your Food!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/jupyter/2021/02/23/Opgave_hotdog_not_hotdog_new.html",
            "relUrl": "/jupyter/2021/02/23/Opgave_hotdog_not_hotdog_new.html",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Opgave 1 09 02 2021",
            "content": "Opgave 1: . Loss metric, arkitektur valg. . Opgave 2: . Name five areas where deep learning is now the best in the world. • NLP • Image Recognition • Medicine (Finding anomalies in radiology images, including CT, MRI, and X-ray images; counting features in pathology slides; measuring features in ultrasounds; diagnosing diabetic retinopathy) • Playing games: Chess, Go, most Atari video games, and many real-time strategy games • Robotics: Handling objects that are challenging to locate (e.g., transparent, shiny, lacking texture) | Based on the book of the same name, what are the requirements for parallel distributed processing (PDP)? . | What were the two theoretical misunderstandings that held back the field of neural networks? • Et ekstra lag af neurons er ikke nok, til at tillade matematiske funktioner • Den kan i starten ikke klare XOR | What is a GPU? • Graphics processing unit / Grafik kort en processor i computeren der kan håndtere mange tusinde opgaver på samme tid | Why is it hard to use a traditional computer program to recognize images in a photo? • Hvis man selv skulle gøre det, ville man skulle lave en masse bitte bittesmå steps for at kunne genkende billedet, og det ville være næsten umuligt | What did Samuel mean by “weight assignment”? • Det er det som modellen tager højde for | What term do we normally use in deep learning for what Samuel called “weights”? • Model parameters | Draw a picture that summarizes Samuel’s view of a machine learning model. . | Why is it hard to understand why a deep learning model makes a particular prediction? • Det er svært at vide præcis hvad der ligger i lagene • Og en model har ikke de menneskelige parametre | What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? • Universal approximation theorem | What do you need in order to train a model? • Labels og data og weights | How could a feedback loop impact the rollout of a predictive policing model? • Hvis ender I et positivt feedback loop, kan det forstærke forudsigelsen, lidt ligesom med corona, jo flere du tester jo flere positive, er der også | Do we always have to use 224×224-pixel images with the cat recognition model? • Nej, men det er en standard for historiske grunde, større resolution giver bedre resultat og mindre modsat | What is the difference between classification and regression? • Classification forudsiger klasse eller categorier og regression forudsiger numeriske værdier Opgave 3: | What is a validation set? What is a test set? Why do we need them? • Validation set bliver brugt til at validere om den predicter rigtigt, så det er ud over det du træner med. | For at være sikker på vi ikke har overfitting og at vi får det ønskede resultat, • Test set er lidt det samme som validation set men det skal holdes fra os selv. Det er det sidste man evaluere med. | Lidt det samme men mere real world, tjekker at du ikke har lavet en lille bubble og også for at vi ikke har en ide om hvad resultatet skal være. | What will fastai do if you don’t provide a validation set? • Den defaulter selv til at udvælge et validation set (20 %) | Can we always use a random sample for a validation set? Why or why not? • Nej, man vil gerne teste op imod det samme validation set så man sikre at få et indblik i hvordan træningen går. | What is overfitting? Provide an example. • Overfitting er når ens model | What is a metric? How does it differ from “loss”? | How can pretrained models help? | What is the “head” of a model? | What kinds of features do the early layers of a CNN find? How about the later layers? | Are image models only useful for photos? | What is an “architecture”? | What is segmentation? | What is y_range used for? When do we need it? | What are “hyperparameters”? | What’s the best way to avoid failures when using AI in an organization? | Complete the Jupyter Notebook online appendix. (use the file app_jupyter.ipynb in Gradient or get it from github: https://oreil.ly/9uPZe) | Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? | Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. | Opgave 4: Decision tree = machine learning . Målet med machine learning er predictions Eksempel på overfitting Derved er det vigtigt at have test data .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/2021/02/16/opgave-1-09-02-2021.html",
            "relUrl": "/2021/02/16/opgave-1-09-02-2021.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kasperhoffmann94.github.io/BlogAIKasperHoffmann/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}